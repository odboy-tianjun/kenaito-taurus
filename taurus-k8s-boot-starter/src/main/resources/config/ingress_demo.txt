    /**
     * 创建k8s ExtensionIngress
     *
     * @param args /
     */
    public ExtensionsV1beta1Ingress createIngressExtension(K8sIngress.CreateArgs args) {
        ValidationUtil.validate(args);
        try {
            String ingressName = "inge-" + args.getAppName();
            // 构建ingress的yaml对象
            ExtensionsV1beta1Ingress ingress = new ExtensionsV1beta1IngressBuilder()
                    .withNewMetadata()
                    .withName(ingressName)
                    .withNamespace(args.getNamespace())
                    .withAnnotations(args.getAnnotations())
                    .endMetadata()
                    .withNewSpec()
                    .addNewRule()
                    .withHost(args.getHostname())
                    .withHttp(new ExtensionsV1beta1HTTPIngressRuleValueBuilder().addToPaths(new ExtensionsV1beta1HTTPIngressPathBuilder()
                            .withPath(args.getPath())
                            .withBackend(new ExtensionsV1beta1IngressBackendBuilder()
                                    .withServiceName(args.getServiceName())
                                    .withServicePort(new IntOrString(args.getServicePort())).build()).build()).build())
                    .endRule()
                    .endSpec()
                    .build();
            ApiClient apiClient = k8SClientAdmin.getClientEnv(args.getClusterCode());
            ExtensionsV1beta1Api networkingV1Api = new ExtensionsV1beta1Api(apiClient);
            return networkingV1Api.createNamespacedIngress(args.getNamespace(), ingress, "false", K8sDryRunUtil.transferState(args.getDryRun()), null);
        } catch (ApiException e) {
            String responseBody = e.getResponseBody();
            log.error("创建Ingress失败: {}", responseBody, e);
            K8sResource.ActionExceptionBody actionExceptionBody = JSON.parseObject(responseBody, K8sResource.ActionExceptionBody.class);
            if (actionExceptionBody != null) {
                throw new BadRequestException("创建Ingress失败, 原因：" + actionExceptionBody.getReason());
            }
            throw new BadRequestException("创建Ingress失败");
        } catch (Exception e) {
            log.error("创建Ingress失败:", e);
            throw new BadRequestException("创建Ingress失败");
        }
    }