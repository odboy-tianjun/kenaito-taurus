# kubectl api-versions
apiVersion: apps.kruise.io/v1beta1
kind: StatefulSet
metadata:
  labels:
    appName: ${appName}
    clusterGroupType: kenaito
    envCode: ${envCode}
  name: ${podName}
  namespace: ${appName}
spec:
  # Pod 的管理策略, OrderedReady（有序启动，默认值）,Parallel（并发一起启动）
  podManagementPolicy: Parallel
  # 副本数量
  replicas: ${replicas}
  # 表示要保留以允许回滚的旧ReplicaSet的数量。默认是10个。如果值为0，表示不保存旧版本
  revisionHistoryLimit: 10
  # 选择器用于标识将受StatefulSet控制的Pod
  selector:
    matchLabels:
      resGroup: ${podName}
  # 用于创建一个Headless服务，这个服务将提供每个Pod的稳定网络标识符
  serviceName: ${appName}-headless
  # 描述StatefulSet创建Pod的模板
  template:
    metadata:
      # Pod标签，用于匹配选择器
      labels:
        appName: ${appName}
        clusterGroupType: kenaito
        resGroup: ${podName}
    spec:
      affinity:
        # Pod 亲和性，调度目标：Pod与指定Pod不在同一拓扑域
        podAntiAffinity:
          # 软策略
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  # In：label 的值在某个列表中
                  # NotIn：label 的值不在某个列表中
                  # Gt：label 的值大于某个值
                  # Lt：label 的值小于某个值
                  # Exists：某个 label 存在
                  # DoesNotExist：某个 label 不存在
                  matchExpressions:
                    - key: resGroup
                      operator: In
                      values:
                        - ${podName}
                topologyKey: failure-domain.beta.kubernetes.io/zone
              weight: 50 # 如果有多个软策略选项的话，权重越大，优先级越高
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: resGroup
                      operator: In
                      values:
                        - ${podName}
                topologyKey: kubernetes.io/hostname
              weight: 60 # 如果有多个软策略选项的话，权重越大，优先级越高
      # Pod中的容器列表
      containers:
        - name: ${appName}-${envCode}-biz # 容器名称
          image: easzlab.io.local:5000/apps/${appName}:${appVersion} #容器镜像
          imagePullPolicy: IfNotPresent
          # 容器生命周期
          lifecycle:
            # 容器停止前, 执行命令
            preStop:
              exec:
                command:
                  - /bin/sh
                  - -c
                  - /home/admin/stop.sh
          # 存活探针：指示容器是否正在运行。如果活动探针失败，则kubelet将杀死Container，并且Container将接受其重新启动策略。如果容器未提供活动性探针，则默认状态为Success
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 20
            periodSeconds: 15
            successThreshold: 1
            tcpSocket:
              port: 22
            timeoutSeconds: 5
          # 就绪探针：指示容器是否准备好服务请求。如果就绪探针失败，则端点控制器将从与Pod匹配的所有服务的端点中删除Pod的IP地址。初始延迟之前的默认就绪状态为Failure。如果容器未提供就绪探测器，则默认状态为Success
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /health/check
              port: 28001
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 3
            successThreshold: 1
            timeoutSeconds: 1
          # 资源配置
          resources:
            requests:
              cpu: "1"
              memory: 1Gi
            limits:
              cpu: "2"
              memory: 2Gi
          # 定义存储卷挂载的路径（写挂载到容器内的路径）
          volumeMounts:
            - name: ${appName}-volume # 定义卷申请模板的名称（要匹配到它才能使用并挂载到容器内）
              mountPath: /home/admin/${appName}/logs
              subPath: biz
            - name: ${appName}-volume
              mountPath: /home/admin/logs
              subPath: mw
      dnsPolicy: ClusterFirst
      readinessGates:
        - conditionType: InPlaceUpdateReady
      # Init容器失败时会使用RestartPolicy策略
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      # 存储卷配置
      volumes:
        - name: ${appName}-volume
          # 当 Pod 因为某些原因被从节点上删除时，emptyDir 卷中的数据也会被永久删除
          emptyDir:
            sizeLimit: 40Gi
  # 更新策略
  updateStrategy:
    # 自动滚动更新Pod，从序号大的开始，确保有序更新
    type: RollingUpdate
    rollingUpdate:
      inPlaceUpdateStrategy:
        gracePeriodSeconds: 5
      # 更新时, 最多有几个POD不可用。一次更新多少个pod
      maxUnavailable: 1
      minReadySeconds: 0
      partition: 0
      # 会尽可能的保证应用在原地升级（只支持镜像的升级，如果修改了yaml中的其他配置项，则无法保证）
      podUpdatePolicy: InPlaceIfPossible