/*
 * Kruise
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.21.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package cn.odboy.model.openkruise;

import com.google.gson.annotations.SerializedName;
import io.kubernetes.client.custom.IntOrString;
import io.kubernetes.client.openapi.models.V1LabelSelector;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import javax.annotation.Generated;
import java.util.Objects;

/**
 * Rolling update config params. Present only if type &#x3D; \&quot;RollingUpdate\&quot;.
 */
@ApiModel(description = "Rolling update config params. Present only if type = \"RollingUpdate\".")
@Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2023-07-21T15:55:09.049+08:00")
public class KruiseAppsV1alpha1RollingUpdateDaemonSet {
    @SerializedName("maxSurge")
    private IntOrString maxSurge = null;
    @SerializedName("maxUnavailable")
    private IntOrString maxUnavailable = null;
    @SerializedName("partition")
    private Integer partition = null;
    @SerializedName("paused")
    private Boolean paused = null;
    @SerializedName("rollingUpdateType")
    private String rollingUpdateType = null;
    @SerializedName("selector")
    private V1LabelSelector selector = null;

    public KruiseAppsV1alpha1RollingUpdateDaemonSet maxSurge(IntOrString maxSurge) {
        this.maxSurge = maxSurge;
        return this;
    }

    /**
     * The maximum number of nodes with an existing available DaemonSet pod that can have an updated DaemonSet pod during during an update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up to a minimum of 1. Default value is 0. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their a new pod created before the old pod is marked as deleted. The update starts by launching new pods on 30% of nodes. Once an updated pod is available (Ready for at least minReadySeconds) the old DaemonSet pod on that node is marked deleted. If the old pod becomes unavailable for any reason (Ready transitions to false, is evicted, or is drained) an updated pod is immediatedly created on that node without considering surge limits. Allowing surge implies the possibility that the resources consumed by the daemonset on any given node can double if the readiness check fails, and so resource intensive daemonsets should take into account that they may cause evictions during disruption. This is beta field and enabled/disabled by DaemonSetUpdateSurge feature gate.
     *
     * @return maxSurge
     **/
    @ApiModelProperty(value = "The maximum number of nodes with an existing available DaemonSet pod that can have an updated DaemonSet pod during during an update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up to a minimum of 1. Default value is 0. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their a new pod created before the old pod is marked as deleted. The update starts by launching new pods on 30% of nodes. Once an updated pod is available (Ready for at least minReadySeconds) the old DaemonSet pod on that node is marked deleted. If the old pod becomes unavailable for any reason (Ready transitions to false, is evicted, or is drained) an updated pod is immediatedly created on that node without considering surge limits. Allowing surge implies the possibility that the resources consumed by the daemonset on any given node can double if the readiness check fails, and so resource intensive daemonsets should take into account that they may cause evictions during disruption. This is beta field and enabled/disabled by DaemonSetUpdateSurge feature gate.")
    public IntOrString getMaxSurge() {
        return maxSurge;
    }

    public void setMaxSurge(IntOrString maxSurge) {
        this.maxSurge = maxSurge;
    }

    public KruiseAppsV1alpha1RollingUpdateDaemonSet maxUnavailable(IntOrString maxUnavailable) {
        this.maxUnavailable = maxUnavailable;
        return this;
    }

    /**
     * The maximum number of DaemonSet pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up. This cannot be 0 if MaxSurge is 0 Default value is 1. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their pods stopped for an update at any given time. The update starts by stopping at most 30% of those DaemonSet pods and then brings up new DaemonSet pods in their place. Once the new pods are available, it then proceeds onto other DaemonSet pods, thus ensuring that at least 70% of original number of DaemonSet pods are available at all times during the update.
     *
     * @return maxUnavailable
     **/
    @ApiModelProperty(value = "The maximum number of DaemonSet pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up. This cannot be 0 if MaxSurge is 0 Default value is 1. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their pods stopped for an update at any given time. The update starts by stopping at most 30% of those DaemonSet pods and then brings up new DaemonSet pods in their place. Once the new pods are available, it then proceeds onto other DaemonSet pods, thus ensuring that at least 70% of original number of DaemonSet pods are available at all times during the update.")
    public IntOrString getMaxUnavailable() {
        return maxUnavailable;
    }

    public void setMaxUnavailable(IntOrString maxUnavailable) {
        this.maxUnavailable = maxUnavailable;
    }

    public KruiseAppsV1alpha1RollingUpdateDaemonSet partition(Integer partition) {
        this.partition = partition;
        return this;
    }

    /**
     * The number of DaemonSet pods remained to be old version. Default value is 0. Maximum value is status.DesiredNumberScheduled, which means no pod will be updated.
     *
     * @return partition
     **/
    @ApiModelProperty(value = "The number of DaemonSet pods remained to be old version. Default value is 0. Maximum value is status.DesiredNumberScheduled, which means no pod will be updated.")
    public Integer getPartition() {
        return partition;
    }

    public void setPartition(Integer partition) {
        this.partition = partition;
    }

    public KruiseAppsV1alpha1RollingUpdateDaemonSet paused(Boolean paused) {
        this.paused = paused;
        return this;
    }

    /**
     * Indicates that the daemon set is paused and will not be processed by the daemon set controller.
     *
     * @return paused
     **/
    @ApiModelProperty(value = "Indicates that the daemon set is paused and will not be processed by the daemon set controller.")
    public Boolean isPaused() {
        return paused;
    }

    public void setPaused(Boolean paused) {
        this.paused = paused;
    }

    public KruiseAppsV1alpha1RollingUpdateDaemonSet rollingUpdateType(String rollingUpdateType) {
        this.rollingUpdateType = rollingUpdateType;
        return this;
    }

    /**
     * Type is to specify which kind of rollingUpdate.
     *
     * @return rollingUpdateType
     **/
    @ApiModelProperty(value = "Type is to specify which kind of rollingUpdate.")
    public String getRollingUpdateType() {
        return rollingUpdateType;
    }

    public void setRollingUpdateType(String rollingUpdateType) {
        this.rollingUpdateType = rollingUpdateType;
    }

    public KruiseAppsV1alpha1RollingUpdateDaemonSet selector(V1LabelSelector selector) {
        this.selector = selector;
        return this;
    }

    /**
     * Get selector
     *
     * @return selector
     **/
    @ApiModelProperty(value = "")
    public V1LabelSelector getSelector() {
        return selector;
    }

    public void setSelector(V1LabelSelector selector) {
        this.selector = selector;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof KruiseAppsV1alpha1RollingUpdateDaemonSet)) {
            return false;
        }
        KruiseAppsV1alpha1RollingUpdateDaemonSet ioKruiseAppsV1alpha1DaemonSetSpecUpdateStrategyRollingUpdate = (KruiseAppsV1alpha1RollingUpdateDaemonSet) o;
        return Objects.equals(this.maxSurge, ioKruiseAppsV1alpha1DaemonSetSpecUpdateStrategyRollingUpdate.maxSurge) &&
                Objects.equals(this.maxUnavailable, ioKruiseAppsV1alpha1DaemonSetSpecUpdateStrategyRollingUpdate.maxUnavailable) &&
                Objects.equals(this.partition, ioKruiseAppsV1alpha1DaemonSetSpecUpdateStrategyRollingUpdate.partition) &&
                Objects.equals(this.paused, ioKruiseAppsV1alpha1DaemonSetSpecUpdateStrategyRollingUpdate.paused) &&
                Objects.equals(this.rollingUpdateType, ioKruiseAppsV1alpha1DaemonSetSpecUpdateStrategyRollingUpdate.rollingUpdateType) &&
                Objects.equals(this.selector, ioKruiseAppsV1alpha1DaemonSetSpecUpdateStrategyRollingUpdate.selector);
    }

    @Override
    public int hashCode() {
        return Objects.hash(maxSurge, maxUnavailable, partition, paused, rollingUpdateType, selector);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class KruiseAppsV1alpha1DaemonSetSpecUpdateStrategyRollingUpdate {\n");
        sb.append("    maxSurge: ").append(toIndentedString(maxSurge)).append("\n");
        sb.append("    maxUnavailable: ").append(toIndentedString(maxUnavailable)).append("\n");
        sb.append("    partition: ").append(toIndentedString(partition)).append("\n");
        sb.append("    paused: ").append(toIndentedString(paused)).append("\n");
        sb.append("    rollingUpdateType: ").append(toIndentedString(rollingUpdateType)).append("\n");
        sb.append("    selector: ").append(toIndentedString(selector)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
