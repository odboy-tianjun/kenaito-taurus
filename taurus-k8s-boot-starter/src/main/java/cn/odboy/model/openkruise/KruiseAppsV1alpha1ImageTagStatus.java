/*
 * Kruise
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.21.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package cn.odboy.model.openkruise;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import javax.annotation.Generated;
import java.util.Date;
import java.util.Objects;

/**
 * ImageTagStatus defines the pulling status of an image tag
 */
@ApiModel(description = "ImageTagStatus defines the pulling status of an image tag")
@Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2023-07-21T15:55:09.049+08:00")
public class KruiseAppsV1alpha1ImageTagStatus {
    @SerializedName("completionTime")
    private Date completionTime = null;
    @SerializedName("imageID")
    private String imageID = null;
    @SerializedName("message")
    private String message = null;
    @SerializedName("phase")
    private String phase = null;
    @SerializedName("progress")
    private Integer progress = null;
    @SerializedName("startTime")
    private Date startTime = null;
    @SerializedName("tag")
    private String tag = null;
    @SerializedName("version")
    private Long version = null;

    public KruiseAppsV1alpha1ImageTagStatus completionTime(Date completionTime) {
        this.completionTime = completionTime;
        return this;
    }

    /**
     * Represents time when the pulling task was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.
     *
     * @return completionTime
     **/
    @ApiModelProperty(value = "Represents time when the pulling task was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.")
    public Date getCompletionTime() {
        return completionTime;
    }

    public void setCompletionTime(Date completionTime) {
        this.completionTime = completionTime;
    }

    public KruiseAppsV1alpha1ImageTagStatus imageID(String imageID) {
        this.imageID = imageID;
        return this;
    }

    /**
     * Represents the ID of this image.
     *
     * @return imageID
     **/
    @ApiModelProperty(value = "Represents the ID of this image.")
    public String getImageID() {
        return imageID;
    }

    public void setImageID(String imageID) {
        this.imageID = imageID;
    }

    public KruiseAppsV1alpha1ImageTagStatus message(String message) {
        this.message = message;
        return this;
    }

    /**
     * Represents the summary information of this node
     *
     * @return message
     **/
    @ApiModelProperty(value = "Represents the summary information of this node")
    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }

    public KruiseAppsV1alpha1ImageTagStatus phase(String phase) {
        this.phase = phase;
        return this;
    }

    /**
     * Represents the image pulling task phase.
     *
     * @return phase
     **/
    @ApiModelProperty(required = true, value = "Represents the image pulling task phase.")
    public String getPhase() {
        return phase;
    }

    public void setPhase(String phase) {
        this.phase = phase;
    }

    public KruiseAppsV1alpha1ImageTagStatus progress(Integer progress) {
        this.progress = progress;
        return this;
    }

    /**
     * Represents the pulling progress of this tag, which is between 0-100. There is no guarantee of monotonic consistency, and it may be a rollback due to retry during pulling.
     *
     * @return progress
     **/
    @ApiModelProperty(value = "Represents the pulling progress of this tag, which is between 0-100. There is no guarantee of monotonic consistency, and it may be a rollback due to retry during pulling.")
    public Integer getProgress() {
        return progress;
    }

    public void setProgress(Integer progress) {
        this.progress = progress;
    }

    public KruiseAppsV1alpha1ImageTagStatus startTime(Date startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Represents time when the pulling task was acknowledged by the image puller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.
     *
     * @return startTime
     **/
    @ApiModelProperty(value = "Represents time when the pulling task was acknowledged by the image puller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.")
    public Date getStartTime() {
        return startTime;
    }

    public void setStartTime(Date startTime) {
        this.startTime = startTime;
    }

    public KruiseAppsV1alpha1ImageTagStatus tag(String tag) {
        this.tag = tag;
        return this;
    }

    /**
     * Represents the image tag.
     *
     * @return tag
     **/
    @ApiModelProperty(required = true, value = "Represents the image tag.")
    public String getTag() {
        return tag;
    }

    public void setTag(String tag) {
        this.tag = tag;
    }

    public KruiseAppsV1alpha1ImageTagStatus version(Long version) {
        this.version = version;
        return this;
    }

    /**
     * Represents the internal version of this tag that the daemon handled.
     *
     * @return version
     **/
    @ApiModelProperty(value = "Represents the internal version of this tag that the daemon handled.")
    public Long getVersion() {
        return version;
    }

    public void setVersion(Long version) {
        this.version = version;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof KruiseAppsV1alpha1ImageTagStatus)) {
            return false;
        }
        KruiseAppsV1alpha1ImageTagStatus ioKruiseAppsV1alpha1NodeImageStatusTags = (KruiseAppsV1alpha1ImageTagStatus) o;
        return Objects.equals(this.completionTime, ioKruiseAppsV1alpha1NodeImageStatusTags.completionTime) &&
                Objects.equals(this.imageID, ioKruiseAppsV1alpha1NodeImageStatusTags.imageID) &&
                Objects.equals(this.message, ioKruiseAppsV1alpha1NodeImageStatusTags.message) &&
                Objects.equals(this.phase, ioKruiseAppsV1alpha1NodeImageStatusTags.phase) &&
                Objects.equals(this.progress, ioKruiseAppsV1alpha1NodeImageStatusTags.progress) &&
                Objects.equals(this.startTime, ioKruiseAppsV1alpha1NodeImageStatusTags.startTime) &&
                Objects.equals(this.tag, ioKruiseAppsV1alpha1NodeImageStatusTags.tag) &&
                Objects.equals(this.version, ioKruiseAppsV1alpha1NodeImageStatusTags.version);
    }

    @Override
    public int hashCode() {
        return Objects.hash(completionTime, imageID, message, phase, progress, startTime, tag, version);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class KruiseAppsV1alpha1NodeImageStatusTags {\n");
        sb.append("    completionTime: ").append(toIndentedString(completionTime)).append("\n");
        sb.append("    imageID: ").append(toIndentedString(imageID)).append("\n");
        sb.append("    message: ").append(toIndentedString(message)).append("\n");
        sb.append("    phase: ").append(toIndentedString(phase)).append("\n");
        sb.append("    progress: ").append(toIndentedString(progress)).append("\n");
        sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
        sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
        sb.append("    version: ").append(toIndentedString(version)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
