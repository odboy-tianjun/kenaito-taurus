/*
 * Kruise
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.21.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package cn.odboy.model.openkruise;

import com.google.gson.annotations.SerializedName;
import io.kubernetes.client.openapi.models.V1LabelSelector;
import io.kubernetes.client.openapi.models.V1Volume;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import javax.annotation.Generated;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * SidecarSetSpec defines the desired state of SidecarSet
 */
@ApiModel(description = "SidecarSetSpec defines the desired state of SidecarSet")
@Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2023-07-21T15:55:09.049+08:00")
public class KruiseAppsV1alpha1SidecarSetSpec {
    @SerializedName("containers")
    private List<Object> containers = null;
    @SerializedName("imagePullSecrets")
    private List<KruiseAppsV1alpha1ReferenceObject> imagePullSecrets = null;
    @SerializedName("initContainers")
    private List<Object> initContainers = null;
    @SerializedName("injectionStrategy")
    private KruiseAppsV1alpha1SidecarSetInjectionStrategy injectionStrategy = null;
    @SerializedName("namespace")
    private String namespace = null;
    @SerializedName("namespaceSelector")
    private V1LabelSelector namespaceSelector = null;
    @SerializedName("patchPodMetadata")
    private List<KruiseAppsV1alpha1SidecarSetPatchPodMetadata> patchPodMetadata = null;
    @SerializedName("revisionHistoryLimit")
    private Integer revisionHistoryLimit = null;
    @SerializedName("selector")
    private V1LabelSelector selector = null;
    @SerializedName("updateStrategy")
    private KruiseAppsV1alpha1SidecarSetUpdateStrategy updateStrategy = null;
    @SerializedName("volumes")
    private List<V1Volume> volumes = null;

    public KruiseAppsV1alpha1SidecarSetSpec containers(List<Object> containers) {
        this.containers = containers;
        return this;
    }

    public KruiseAppsV1alpha1SidecarSetSpec addContainersItem(Object containersItem) {
        if (this.containers == null) {
            this.containers = new ArrayList<Object>();
        }
        this.containers.add(containersItem);
        return this;
    }

    /**
     * Containers is the list of sidecar containers to be injected into the selected pod
     *
     * @return containers
     **/
    @ApiModelProperty(value = "Containers is the list of sidecar containers to be injected into the selected pod")
    public List<Object> getContainers() {
        return containers;
    }

    public void setContainers(List<Object> containers) {
        this.containers = containers;
    }

    public KruiseAppsV1alpha1SidecarSetSpec imagePullSecrets(List<KruiseAppsV1alpha1ReferenceObject> imagePullSecrets) {
        this.imagePullSecrets = imagePullSecrets;
        return this;
    }

    public KruiseAppsV1alpha1SidecarSetSpec addImagePullSecretsItem(KruiseAppsV1alpha1ReferenceObject imagePullSecretsItem) {
        if (this.imagePullSecrets == null) {
            this.imagePullSecrets = new ArrayList<KruiseAppsV1alpha1ReferenceObject>();
        }
        this.imagePullSecrets.add(imagePullSecretsItem);
        return this;
    }

    /**
     * List of the names of secrets required by pulling sidecar container images
     *
     * @return imagePullSecrets
     **/
    @ApiModelProperty(value = "List of the names of secrets required by pulling sidecar container images")
    public List<KruiseAppsV1alpha1ReferenceObject> getImagePullSecrets() {
        return imagePullSecrets;
    }

    public void setImagePullSecrets(List<KruiseAppsV1alpha1ReferenceObject> imagePullSecrets) {
        this.imagePullSecrets = imagePullSecrets;
    }

    public KruiseAppsV1alpha1SidecarSetSpec initContainers(List<Object> initContainers) {
        this.initContainers = initContainers;
        return this;
    }

    public KruiseAppsV1alpha1SidecarSetSpec addInitContainersItem(Object initContainersItem) {
        if (this.initContainers == null) {
            this.initContainers = new ArrayList<Object>();
        }
        this.initContainers.add(initContainersItem);
        return this;
    }

    /**
     * InitContainers is the list of init containers to be injected into the selected pod We will inject those containers by their name in ascending order We only inject init containers when a new pod is created, it does not apply to any existing pod
     *
     * @return initContainers
     **/
    @ApiModelProperty(value = "InitContainers is the list of init containers to be injected into the selected pod We will inject those containers by their name in ascending order We only inject init containers when a new pod is created, it does not apply to any existing pod")
    public List<Object> getInitContainers() {
        return initContainers;
    }

    public void setInitContainers(List<Object> initContainers) {
        this.initContainers = initContainers;
    }

    public KruiseAppsV1alpha1SidecarSetSpec injectionStrategy(KruiseAppsV1alpha1SidecarSetInjectionStrategy injectionStrategy) {
        this.injectionStrategy = injectionStrategy;
        return this;
    }

    /**
     * Get injectionStrategy
     *
     * @return injectionStrategy
     **/
    @ApiModelProperty(value = "")
    public KruiseAppsV1alpha1SidecarSetInjectionStrategy getInjectionStrategy() {
        return injectionStrategy;
    }

    public void setInjectionStrategy(KruiseAppsV1alpha1SidecarSetInjectionStrategy injectionStrategy) {
        this.injectionStrategy = injectionStrategy;
    }

    public KruiseAppsV1alpha1SidecarSetSpec namespace(String namespace) {
        this.namespace = namespace;
        return this;
    }

    /**
     * Namespace sidecarSet will only match the pods in the namespace otherwise, match pods in all namespaces(in cluster)
     *
     * @return namespace
     **/
    @ApiModelProperty(value = "Namespace sidecarSet will only match the pods in the namespace otherwise, match pods in all namespaces(in cluster)")
    public String getNamespace() {
        return namespace;
    }

    public void setNamespace(String namespace) {
        this.namespace = namespace;
    }

    public KruiseAppsV1alpha1SidecarSetSpec namespaceSelector(V1LabelSelector namespaceSelector) {
        this.namespaceSelector = namespaceSelector;
        return this;
    }

    /**
     * Get namespaceSelector
     *
     * @return namespaceSelector
     **/
    @ApiModelProperty(value = "")
    public V1LabelSelector getNamespaceSelector() {
        return namespaceSelector;
    }

    public void setNamespaceSelector(V1LabelSelector namespaceSelector) {
        this.namespaceSelector = namespaceSelector;
    }

    public KruiseAppsV1alpha1SidecarSetSpec patchPodMetadata(List<KruiseAppsV1alpha1SidecarSetPatchPodMetadata> patchPodMetadata) {
        this.patchPodMetadata = patchPodMetadata;
        return this;
    }

    public KruiseAppsV1alpha1SidecarSetSpec addPatchPodMetadataItem(KruiseAppsV1alpha1SidecarSetPatchPodMetadata patchPodMetadataItem) {
        if (this.patchPodMetadata == null) {
            this.patchPodMetadata = new ArrayList<KruiseAppsV1alpha1SidecarSetPatchPodMetadata>();
        }
        this.patchPodMetadata.add(patchPodMetadataItem);
        return this;
    }

    /**
     * SidecarSet support to inject &amp; in-place update metadata in pod.
     *
     * @return patchPodMetadata
     **/
    @ApiModelProperty(value = "SidecarSet support to inject & in-place update metadata in pod.")
    public List<KruiseAppsV1alpha1SidecarSetPatchPodMetadata> getPatchPodMetadata() {
        return patchPodMetadata;
    }

    public void setPatchPodMetadata(List<KruiseAppsV1alpha1SidecarSetPatchPodMetadata> patchPodMetadata) {
        this.patchPodMetadata = patchPodMetadata;
    }

    public KruiseAppsV1alpha1SidecarSetSpec revisionHistoryLimit(Integer revisionHistoryLimit) {
        this.revisionHistoryLimit = revisionHistoryLimit;
        return this;
    }

    /**
     * RevisionHistoryLimit indicates the maximum quantity of stored revisions about the SidecarSet. default value is 10
     *
     * @return revisionHistoryLimit
     **/
    @ApiModelProperty(value = "RevisionHistoryLimit indicates the maximum quantity of stored revisions about the SidecarSet. default value is 10")
    public Integer getRevisionHistoryLimit() {
        return revisionHistoryLimit;
    }

    public void setRevisionHistoryLimit(Integer revisionHistoryLimit) {
        this.revisionHistoryLimit = revisionHistoryLimit;
    }

    public KruiseAppsV1alpha1SidecarSetSpec selector(V1LabelSelector selector) {
        this.selector = selector;
        return this;
    }

    /**
     * Get selector
     *
     * @return selector
     **/
    @ApiModelProperty(value = "")
    public V1LabelSelector getSelector() {
        return selector;
    }

    public void setSelector(V1LabelSelector selector) {
        this.selector = selector;
    }

    public KruiseAppsV1alpha1SidecarSetSpec updateStrategy(KruiseAppsV1alpha1SidecarSetUpdateStrategy updateStrategy) {
        this.updateStrategy = updateStrategy;
        return this;
    }

    /**
     * Get updateStrategy
     *
     * @return updateStrategy
     **/
    @ApiModelProperty(value = "")
    public KruiseAppsV1alpha1SidecarSetUpdateStrategy getUpdateStrategy() {
        return updateStrategy;
    }

    public void setUpdateStrategy(KruiseAppsV1alpha1SidecarSetUpdateStrategy updateStrategy) {
        this.updateStrategy = updateStrategy;
    }

    public KruiseAppsV1alpha1SidecarSetSpec volumes(List<V1Volume> volumes) {
        this.volumes = volumes;
        return this;
    }

    /**
     * List of volumes that can be mounted by sidecar containers
     *
     * @return volumes
     **/
    @ApiModelProperty(value = "List of volumes that can be mounted by sidecar containers")
    public List<V1Volume> getVolumes() {
        return volumes;
    }

    public void setVolumes(List<V1Volume> volumes) {
        this.volumes = volumes;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof KruiseAppsV1alpha1SidecarSetSpec)) {
            return false;
        }
        KruiseAppsV1alpha1SidecarSetSpec ioKruiseAppsV1alpha1SidecarSetSpec = (KruiseAppsV1alpha1SidecarSetSpec) o;
        return Objects.equals(this.containers, ioKruiseAppsV1alpha1SidecarSetSpec.containers) &&
                Objects.equals(this.imagePullSecrets, ioKruiseAppsV1alpha1SidecarSetSpec.imagePullSecrets) &&
                Objects.equals(this.initContainers, ioKruiseAppsV1alpha1SidecarSetSpec.initContainers) &&
                Objects.equals(this.injectionStrategy, ioKruiseAppsV1alpha1SidecarSetSpec.injectionStrategy) &&
                Objects.equals(this.namespace, ioKruiseAppsV1alpha1SidecarSetSpec.namespace) &&
                Objects.equals(this.namespaceSelector, ioKruiseAppsV1alpha1SidecarSetSpec.namespaceSelector) &&
                Objects.equals(this.patchPodMetadata, ioKruiseAppsV1alpha1SidecarSetSpec.patchPodMetadata) &&
                Objects.equals(this.revisionHistoryLimit, ioKruiseAppsV1alpha1SidecarSetSpec.revisionHistoryLimit) &&
                Objects.equals(this.selector, ioKruiseAppsV1alpha1SidecarSetSpec.selector) &&
                Objects.equals(this.updateStrategy, ioKruiseAppsV1alpha1SidecarSetSpec.updateStrategy) &&
                Objects.equals(this.volumes, ioKruiseAppsV1alpha1SidecarSetSpec.volumes);
    }

    @Override
    public int hashCode() {
        return Objects.hash(containers, imagePullSecrets, initContainers, injectionStrategy, namespace, namespaceSelector, patchPodMetadata, revisionHistoryLimit, selector, updateStrategy, volumes);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class KruiseAppsV1alpha1SidecarSetSpec {\n");
        sb.append("    containers: ").append(toIndentedString(containers)).append("\n");
        sb.append("    imagePullSecrets: ").append(toIndentedString(imagePullSecrets)).append("\n");
        sb.append("    initContainers: ").append(toIndentedString(initContainers)).append("\n");
        sb.append("    injectionStrategy: ").append(toIndentedString(injectionStrategy)).append("\n");
        sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
        sb.append("    namespaceSelector: ").append(toIndentedString(namespaceSelector)).append("\n");
        sb.append("    patchPodMetadata: ").append(toIndentedString(patchPodMetadata)).append("\n");
        sb.append("    revisionHistoryLimit: ").append(toIndentedString(revisionHistoryLimit)).append("\n");
        sb.append("    selector: ").append(toIndentedString(selector)).append("\n");
        sb.append("    updateStrategy: ").append(toIndentedString(updateStrategy)).append("\n");
        sb.append("    volumes: ").append(toIndentedString(volumes)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
