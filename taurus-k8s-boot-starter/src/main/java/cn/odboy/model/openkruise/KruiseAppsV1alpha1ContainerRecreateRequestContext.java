/*
 * Kruise
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.21.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package cn.odboy.model.openkruise;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import javax.annotation.Generated;
import java.util.Objects;

/**
 * StatusContext is synced from the real Pod status during this ContainerRecreateRequest creating. Populated by the system. Read-only.
 */
@ApiModel(description = "StatusContext is synced from the real Pod status during this ContainerRecreateRequest creating. Populated by the system. Read-only.")
@Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2023-07-21T15:55:09.049+08:00")
public class KruiseAppsV1alpha1ContainerRecreateRequestContext {
    @SerializedName("containerID")
    private String containerID = null;
    @SerializedName("restartCount")
    private Integer restartCount = null;

    public KruiseAppsV1alpha1ContainerRecreateRequestContext containerID(String containerID) {
        this.containerID = containerID;
        return this;
    }

    /**
     * Container&#39;s ID in the format &#39;docker://&lt;container_id&gt;&#39;.
     *
     * @return containerID
     **/
    @ApiModelProperty(required = true, value = "Container's ID in the format 'docker://<container_id>'.")
    public String getContainerID() {
        return containerID;
    }

    public void setContainerID(String containerID) {
        this.containerID = containerID;
    }

    public KruiseAppsV1alpha1ContainerRecreateRequestContext restartCount(Integer restartCount) {
        this.restartCount = restartCount;
        return this;
    }

    /**
     * The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC.
     *
     * @return restartCount
     **/
    @ApiModelProperty(required = true, value = "The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC.")
    public Integer getRestartCount() {
        return restartCount;
    }

    public void setRestartCount(Integer restartCount) {
        this.restartCount = restartCount;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof KruiseAppsV1alpha1ContainerRecreateRequestContext)) {
            return false;
        }
        KruiseAppsV1alpha1ContainerRecreateRequestContext ioKruiseAppsV1alpha1ContainerRecreateRequestSpecStatusContext = (KruiseAppsV1alpha1ContainerRecreateRequestContext) o;
        return Objects.equals(this.containerID, ioKruiseAppsV1alpha1ContainerRecreateRequestSpecStatusContext.containerID) &&
                Objects.equals(this.restartCount, ioKruiseAppsV1alpha1ContainerRecreateRequestSpecStatusContext.restartCount);
    }

    @Override
    public int hashCode() {
        return Objects.hash(containerID, restartCount);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class KruiseAppsV1alpha1ContainerRecreateRequestSpecStatusContext {\n");
        sb.append("    containerID: ").append(toIndentedString(containerID)).append("\n");
        sb.append("    restartCount: ").append(toIndentedString(restartCount)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
