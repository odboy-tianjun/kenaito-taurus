/*
 * Kruise
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.21.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package cn.odboy.model.openkruise;

import com.google.gson.annotations.SerializedName;
import io.kubernetes.client.openapi.models.V1LabelSelector;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import javax.annotation.Generated;
import java.util.Objects;

/**
 * EphemeralJobSpec defines the desired state of EphemeralJob
 */
@ApiModel(description = "EphemeralJobSpec defines the desired state of EphemeralJob")
@Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2023-07-21T15:55:09.049+08:00")
public class KruiseAppsV1alpha1EphemeralJobSpec {
    @SerializedName("activeDeadlineSeconds")
    private Long activeDeadlineSeconds = null;
    @SerializedName("parallelism")
    private Integer parallelism = null;
    @SerializedName("paused")
    private Boolean paused = null;
    @SerializedName("replicas")
    private Integer replicas = null;
    @SerializedName("selector")
    private V1LabelSelector selector = null;
    @SerializedName("template")
    private KruiseAppsV1alpha1EphemeralContainerTemplateSpec template = null;
    @SerializedName("ttlSecondsAfterFinished")
    private Integer ttlSecondsAfterFinished = null;

    public KruiseAppsV1alpha1EphemeralJobSpec activeDeadlineSeconds(Long activeDeadlineSeconds) {
        this.activeDeadlineSeconds = activeDeadlineSeconds;
        return this;
    }

    /**
     * ActiveDeadlineSeconds specifies the duration in seconds relative to the startTime that the job may be active before the system tries to terminate it; value must be positive integer. Only works for Always type.
     *
     * @return activeDeadlineSeconds
     **/
    @ApiModelProperty(value = "ActiveDeadlineSeconds specifies the duration in seconds relative to the startTime that the job may be active before the system tries to terminate it; value must be positive integer. Only works for Always type.")
    public Long getActiveDeadlineSeconds() {
        return activeDeadlineSeconds;
    }

    public void setActiveDeadlineSeconds(Long activeDeadlineSeconds) {
        this.activeDeadlineSeconds = activeDeadlineSeconds;
    }

    public KruiseAppsV1alpha1EphemeralJobSpec parallelism(Integer parallelism) {
        this.parallelism = parallelism;
        return this;
    }

    /**
     * Parallelism specifies the maximum desired number of pods which matches running ephemeral containers.
     *
     * @return parallelism
     **/
    @ApiModelProperty(value = "Parallelism specifies the maximum desired number of pods which matches running ephemeral containers.")
    public Integer getParallelism() {
        return parallelism;
    }

    public void setParallelism(Integer parallelism) {
        this.parallelism = parallelism;
    }

    public KruiseAppsV1alpha1EphemeralJobSpec paused(Boolean paused) {
        this.paused = paused;
        return this;
    }

    /**
     * Paused will pause the ephemeral job.
     *
     * @return paused
     **/
    @ApiModelProperty(value = "Paused will pause the ephemeral job.")
    public Boolean isPaused() {
        return paused;
    }

    public void setPaused(Boolean paused) {
        this.paused = paused;
    }

    public KruiseAppsV1alpha1EphemeralJobSpec replicas(Integer replicas) {
        this.replicas = replicas;
        return this;
    }

    /**
     * Replicas indicates a part of the quantity from matched pods by selector. Usually it is used for gray scale working. if Replicas exceeded the matched number by selector or not be set, replicas will not work.
     *
     * @return replicas
     **/
    @ApiModelProperty(value = "Replicas indicates a part of the quantity from matched pods by selector. Usually it is used for gray scale working. if Replicas exceeded the matched number by selector or not be set, replicas will not work.")
    public Integer getReplicas() {
        return replicas;
    }

    public void setReplicas(Integer replicas) {
        this.replicas = replicas;
    }

    public KruiseAppsV1alpha1EphemeralJobSpec selector(V1LabelSelector selector) {
        this.selector = selector;
        return this;
    }

    /**
     * Get selector
     *
     * @return selector
     **/
    @ApiModelProperty(required = true, value = "")
    public V1LabelSelector getSelector() {
        return selector;
    }

    public void setSelector(V1LabelSelector selector) {
        this.selector = selector;
    }

    public KruiseAppsV1alpha1EphemeralJobSpec template(KruiseAppsV1alpha1EphemeralContainerTemplateSpec template) {
        this.template = template;
        return this;
    }

    /**
     * Get template
     *
     * @return template
     **/
    @ApiModelProperty(required = true, value = "")
    public KruiseAppsV1alpha1EphemeralContainerTemplateSpec getTemplate() {
        return template;
    }

    public void setTemplate(KruiseAppsV1alpha1EphemeralContainerTemplateSpec template) {
        this.template = template;
    }

    public KruiseAppsV1alpha1EphemeralJobSpec ttlSecondsAfterFinished(Integer ttlSecondsAfterFinished) {
        this.ttlSecondsAfterFinished = ttlSecondsAfterFinished;
        return this;
    }

    /**
     * ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the eJob finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, default value is 1800 If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes.
     *
     * @return ttlSecondsAfterFinished
     **/
    @ApiModelProperty(value = "ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the eJob finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, default value is 1800 If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes.")
    public Integer getTtlSecondsAfterFinished() {
        return ttlSecondsAfterFinished;
    }

    public void setTtlSecondsAfterFinished(Integer ttlSecondsAfterFinished) {
        this.ttlSecondsAfterFinished = ttlSecondsAfterFinished;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof KruiseAppsV1alpha1EphemeralJobSpec)) {
            return false;
        }
        KruiseAppsV1alpha1EphemeralJobSpec ioKruiseAppsV1alpha1EphemeralJobSpec = (KruiseAppsV1alpha1EphemeralJobSpec) o;
        return Objects.equals(this.activeDeadlineSeconds, ioKruiseAppsV1alpha1EphemeralJobSpec.activeDeadlineSeconds) &&
                Objects.equals(this.parallelism, ioKruiseAppsV1alpha1EphemeralJobSpec.parallelism) &&
                Objects.equals(this.paused, ioKruiseAppsV1alpha1EphemeralJobSpec.paused) &&
                Objects.equals(this.replicas, ioKruiseAppsV1alpha1EphemeralJobSpec.replicas) &&
                Objects.equals(this.selector, ioKruiseAppsV1alpha1EphemeralJobSpec.selector) &&
                Objects.equals(this.template, ioKruiseAppsV1alpha1EphemeralJobSpec.template) &&
                Objects.equals(this.ttlSecondsAfterFinished, ioKruiseAppsV1alpha1EphemeralJobSpec.ttlSecondsAfterFinished);
    }

    @Override
    public int hashCode() {
        return Objects.hash(activeDeadlineSeconds, parallelism, paused, replicas, selector, template, ttlSecondsAfterFinished);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class KruiseAppsV1alpha1EphemeralJobSpec {\n");
        sb.append("    activeDeadlineSeconds: ").append(toIndentedString(activeDeadlineSeconds)).append("\n");
        sb.append("    parallelism: ").append(toIndentedString(parallelism)).append("\n");
        sb.append("    paused: ").append(toIndentedString(paused)).append("\n");
        sb.append("    replicas: ").append(toIndentedString(replicas)).append("\n");
        sb.append("    selector: ").append(toIndentedString(selector)).append("\n");
        sb.append("    template: ").append(toIndentedString(template)).append("\n");
        sb.append("    ttlSecondsAfterFinished: ").append(toIndentedString(ttlSecondsAfterFinished)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
